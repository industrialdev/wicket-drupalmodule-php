<?php

use Drupal\wicket\Form\wicketSettingsForm;
use \Wicket\Client;

/**
 * Loads the PHP SDK
 */
function wicket_api_client() {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  static $client;

  if ($client === NULL) {
    try {
      // Wicket SDK being included as part of the main composer.json
      // likely using the "merge-plugin" approach
      if (!class_exists('\Wicket\Client')) {
        // No library available!
        return FALSE;
      }

      $config = \Drupal::config('wicket.settings');

      $app_key = $config->get(wicketSettingsForm::FORM_ID . '_app_key');
      $api_endpoint = $config->get(wicketSettingsForm::FORM_ID . '_api_endpoint');
      $secret_key = $config->get(wicketSettingsForm::FORM_ID . '_secret_key');
      $person_id = $config->get(wicketSettingsForm::FORM_ID . '_person_id');

      $client = new \Wicket\Client($app_key, $secret_key, $api_endpoint);
      $client->authorize($person_id);
      // test the endpoint before returning the client to ensure it's up
      $client->get($api_endpoint);
      $client->locale = $language;
    }
    catch (\Exception $e) {
      // don't return the $client unless the API is up.
      return false;
    }
  }
  return $client;
}

function wicket_current_person_uuid() {
  /** @var UserDataInterface $userData */
  $userData = \Drupal::service('user.data');
  $user = \Drupal::currentUser();

  $person_id = $userData->get('wicket', $user->id(), 'personUuid');

  return $person_id;
}

function wicket_api_client_current_user() {
  $client = wicket_api_client();

  if ($client) {
    $person_id = wicket_current_person_uuid();

    if ($person_id) {
      $client->authorize($person_id);
    } else {
      $client = null;
    }
  }

  return $client;
}

function wicket_get_person_by_id($uuid){
  static $person = null;
  if (is_null($person)) {
    if ($uuid) {
      try {
        $client = wicket_api_client();
        $person = $client->people->fetch($uuid);
        return $person;
      } catch (Exception $e) {
        return false;
      }
    }
  }
  return $person;
}

function wicket_get_included_resource($resource, $included_resource_id) {
  if ($resource && $included_resource_id) {
    return $resource->included()->filter(function ($included) use ($included_resource_id) {
      if ($included_resource_id instanceof \Wicket\Entities\Base) {
        return $included['type'] === $included_resource_id->type && $included['id'] === $included_resource_id->id;
      } else {
        return $included['type'] === $included_resource_id['type'] && $included['id'] === $included_resource_id['id'];
      }
    })->first();
  }

  return null;
}

function wicket_get_person_roles_by_id($uuid){
  static $roles = null;
  if (is_null($roles)) {
    $person = wicket_get_person_by_id($uuid);
    if ($person) {
      $variants = $person->included()->filter(function ($item) {
        return isset($item['type']) && $item['type'] == 'roles';
      });

      $roles = [];
      foreach ($variants->all() as $role) {
        // if this role has an associated ORG, get its name and add as a suffix
        $role_id = str_replace('-','_',$role['id']);
        if (isset($role['relationships']['resource']['data']['id'])) {
          $org_id = $role['relationships']['resource']['data']['id'];
          $client = wicket_api_client();
          $org = $client->organizations->fetch($org_id);
          // convert dashes to underscores for Drupal's role machine name. It doesn't accept dashes
          $roles[$role_id] = $org->legal_name.' - '.$role['attributes']['name'];
        }else {
          $roles[$role_id] = $role['attributes']['name'];
        }
      }
    }
  }
  return $roles;
}

function wicket_build_collection($response, $client) {
  if ($response) {
    // TOOD: This is needed due to current limitations with the wicket php sdk, (relationships are not set for collections).
    // Should refactor this logic back into the SDK.
    $data = array_map(function ($item) use ($response){
      $entity = \Wicket\Entities\Base::fromJsonAPI($item, true);
      $entity->addIncluded($response['included']);
      return $entity;

    }, $response['data']);

    $collection = new \Wicket\WicketCollection([], $client);
    $collection = $collection->concat($data);

    return $collection;
  }

  return null;
}

function wicket_get_person_orders($person_uuid, $args = [], $client = null) {
  $client = $client ?: wicket_api_client_current_user();
  $response = $client->get("/people/$person_uuid/orders", $args);

  return wicket_build_collection($response, $client);
}

/**------------------------------------------------------------------
 * Gets the current person memberships
 * using the person membership entries endpoint
 ------------------------------------------------------------------*/
 function wicket_get_current_person_memberships(){
	$client = wicket_api_client();
	$uuid = wicket_current_person_uuid();
  
  try{
    $memberships = $client->get('people/'.$uuid.'/membership_entries?include=membership,organization_membership.organization,fusebill_subscription');
  }catch (Exception $e){
  }
	if ($memberships) {
		return $memberships;
	}
}